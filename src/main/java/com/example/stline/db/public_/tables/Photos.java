/*
 * This file is generated by jOOQ.
 */
package com.example.stline.db.public_.tables;


import com.example.stline.db.public_.Indexes;
import com.example.stline.db.public_.Keys;
import com.example.stline.db.public_.Public;
import com.example.stline.db.public_.tables.records.PhotosRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Photos extends TableImpl<PhotosRecord> {

    private static final long serialVersionUID = -1602196902;

    /**
     * The reference instance of <code>public.photos</code>
     */
    public static final Photos PHOTOS = new Photos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PhotosRecord> getRecordType() {
        return PhotosRecord.class;
    }

    /**
     * The column <code>public.photos.id</code>.
     */
    public final TableField<PhotosRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.photos.brand</code>.
     */
    public final TableField<PhotosRecord, String> BRAND = createField("brand", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.photos.model</code>.
     */
    public final TableField<PhotosRecord, String> MODEL = createField("model", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.photos.product</code>.
     */
    public final TableField<PhotosRecord, Integer> PRODUCT = createField("product", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.photos</code> table reference
     */
    public Photos() {
        this(DSL.name("photos"), null);
    }

    /**
     * Create an aliased <code>public.photos</code> table reference
     */
    public Photos(String alias) {
        this(DSL.name(alias), PHOTOS);
    }

    /**
     * Create an aliased <code>public.photos</code> table reference
     */
    public Photos(Name alias) {
        this(alias, PHOTOS);
    }

    private Photos(Name alias, Table<PhotosRecord> aliased) {
        this(alias, aliased, null);
    }

    private Photos(Name alias, Table<PhotosRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Photos(Table<O> child, ForeignKey<O, PhotosRecord> key) {
        super(child, key, PHOTOS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PHOTOS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PhotosRecord> getPrimaryKey() {
        return Keys.PHOTOS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PhotosRecord>> getKeys() {
        return Arrays.<UniqueKey<PhotosRecord>>asList(Keys.PHOTOS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PhotosRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PhotosRecord, ?>>asList(Keys.PHOTOS__FK_PHOTOS_PRODUCTS);
    }

    public Products products() {
        return new Products(this, Keys.PHOTOS__FK_PHOTOS_PRODUCTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Photos as(String alias) {
        return new Photos(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Photos as(Name alias) {
        return new Photos(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Photos rename(String name) {
        return new Photos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Photos rename(Name name) {
        return new Photos(name, null);
    }
}
